#!/bin/bash
#
# elphel-parallel-processing - Elphel camera array images post processing using GNU parallel
#
# Copyright (c) 2013-2014 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
# Author(s):
#
#      Luc Deschenaux <l.deschenaux@foxel.ch>
#      Kevin Velickovic <k.velickovic@foxel.ch>
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#      You are required to preserve legal notices and author attributions in
#      that material or in the Appropriate Legal Notices displayed by works
#      containing it.
#
#      You are required to attribute the work as explained in the "Usage and
#      Attribution" section of <http://foxel.ch/license>.

set -e

[ -n "$DEBUG" ] && set -x

if [ "$1" = "-s" -o "$1" = "--shuffle" ] ; then
  SHUFFLE=-s
  shift
fi

if [ $# -lt 2 -o $# -gt 6 ] ; then
  echo "Usage: $(basename $0) <eyesis_correction_xml> <source_dir> [ <results_dir>  <output_file> <split_at> <truncate> ]"
  echo
  echo "- When no output file is specified, parallel is run immediately"
  echo "- Paths for corrxml can be specified as environment variables"
  echo "- IMAGEJMEM, REMOTELOGGER, FILELIST, LOGDIR, REMOTESCRIPT too"
  echo "- <split_at> defaults to 9. When you want only the 8 first channels"
  echo "  per timestamp then set <split_at> to 8 and <truncate> to true"
  echo
  exit 1
fi

XML="$1"
SRCDIR="$2"
DSTDIR="$3"
OUTPUT="$4"
SPLITAT="$5"
TRUNCATE="$6"

[ -z "$SPLITAT" ] && SPLITAT=9  # channels per job (xml)
[ -z "$IMAGEJMEM" ] && IMAGEJMEM=7150m

if [ -z "$REMOTELOGGER" ] ; then
  REMOTELOGGER=$(which paralog.sh)
  REMOTELOGGER=${REMOTELOGGER#$HOME/}
fi

[ -z "$REMOTELOGGER" ] && REMOTELOGGER=remote-scripts/paralog.sh

getTimestamps() {
    while read JP4 ; do
        echo $(basename $JP4) | sed -r -n -e 's/^([0-9]{10}_[0-9]{6})_.*/\1/p'
    done | sort -u
}

shuffile() {                                                                                                                                          
  argv=($(cat "$FILELIST" | getTimestamps))
  argc=${#argv[*]}
  last=$(expr $argc - 1)
  [ $last -eq 0 ] && last=1
  step=$(expr $argc / 2)
  [ $step -eq 0 ] && step=1
  while true ; do
    for (( i=0; i<$argc ; i+=step )) ; do
      stamp="${argv[$i]}"
      if [ -n "$stamp" ] ; then
        grep -e $stamp "$FILELIST" > /tmp/jp4.$$.tmp
        argv[$i]=
        jp4_count=($(wc -l /tmp/jp4..$$.tmp))
        if [ ${jp4_count[0]} -eq 9 ] ; then
          cat /tmp/jp4.$$.tmp
        else
          echo "Warning: $t discarded (jp4 count is ${jp4_count[0]})"
        fi
        rm /tmp/jp4.$$.tmp
      fi
    done
    if [ -n "${argv[$last]}" ] ; then
      grep -e ${argv[$last]} "$FILELIST" > /tmp/jp4.$$.tmp
      argv[argc-1]=0
      jp4_count=($(wc -l /tmp/jp4.$$.tmp))
      if [ ${jp4_count[0]} -eq 9 ] ; then
        cat /tmp/jp4.$$.tmp
      else
        echo "Warning: $t discarded (jp4 count is ${jp4_count[0]})"
      fi
      rm /tmp/jp4.$$.tmp
    fi
    [ $step -eq 1 ] && break
    ((step/=2))
  done
}
  
NOW=$(date +%s) # _%N

if [ -z "$OUTPUT" ] ; then
     OUTPUT="post_processing-$NOW"
     RUN=yes
fi

[ -z "$LOGDIR" ] && LOGDIR=log/post_processing
mkdir -p $LOGDIR

if [ -z "$REMOTESCRIPT" ] ; then
  REMOTESCRIPT=$(which post_process.sh)
  REMOTESCRIPT=${REMOTESCRIPT#$HOME/}
fi

[ -z "$REMOTESCRIPT" ] && REMOTESCRIPT=remote-scripts/post_process.sh
mkdir -p $SRCDIR/../post_processing

getfilelist() {
  if [ -z "$FILELIST" ] ; then
    FILELIST="/tmp/filelist_$NOW.tmp"
    find "$SRCDIR" -maxdepth 1 -name \*.jp4 | sort > $FILELIST
  else
    echo "Using files listed in $FILELIST" 1>&2
  fi
  if [ -n "$SHUFFLE" ] ; then
    shuffile
  else
    cat "$FILELIST"
  fi
}

if [ -z "$PBANG" ] ; then
  PBANG=$(which parallelbang)
  PBANG=${PBANG#$HOME/}
fi

[ -z "$PBANG" ] && PBANG=bin/parallelbang

mkdir -p ~/.parallel
[ -f ~/.parallel/sshloginfile ] || touch ~/.parallel/sshloginfile  

echo "#!$PBANG --gnu -I _XML_ --ungroup --sshloginfile .. --joblog $LOGDIR/$(basename $OUTPUT).log --bf $REMOTESCRIPT --bf $REMOTELOGGER $REMOTESCRIPT _XML_ $IMAGEJMEM \\\\\\\\| $REMOTELOGGER $(basename $OUTPUT)" | tee "$OUTPUT"
chmod +x "$OUTPUT"

doit() {
  if (( $SPLITAT > 9 )) ; then
    OUTXML=$SRCDIR/../post_processing/${NOW}.xml
    corrxml.sh $SHUFFLE $XML $SRCDIR $DSTDIR $OUTXML $SPLITAT
    find $(dirname $OUTXML) -maxdepth 1 -type f -name $(basename $OUTXML .xml)\* | sort
  else
    # FILELIST is also used in corrxml.sh
    export FILELIST
    getfilelist | getTimestamps | while read TIMESTAMP ; do
      OUTXML=$SRCDIR/../post_processing/${NOW}-$TIMESTAMP.xml
      corrxml.sh $XML $SRCDIR $DSTDIR $OUTXML $SPLITAT $TIMESTAMP $TRUNCATE
      find $(dirname $OUTXML) -maxdepth 1 -type f -name $(basename $OUTXML .xml)\* | sort
    done
  fi
}

if [ -n "$RUN" ] ; then
  echo "#### running $OUTPUT" 1>&2
  doit | tee -a "$OUTPUT" | parallel --gnu -I _XML_ --ungroup --sshloginfile ..  --joblog $LOGDIR/$(basename $OUTPUT).log --bf $REMOTESCRIPT --bf $REMOTELOGGER $REMOTESCRIPT _XML_ $IMAGEJMEM \| $REMOTELOGGER $(basename $OUTPUT)
else
  doit | tee -a "$OUTPUT"
fi

echo "#### saved as $OUTPUT" 1>&2
