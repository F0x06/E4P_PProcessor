#!/bin/bash
#
# elphel-parallel-processing - Elphel camera array images post processing using GNU parallel
#
# Copyright (c) 2013-2014 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#      Luc Deschenaux <luc.deschenaux@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#      You are required to preserve legal notices and author attributions in
#      that material or in the Appropriate Legal Notices displayed by works
#      containing it.
#
#      You are required to attribute the work as explained in the "Usage and
#      Attribution" section of <http://foxel.ch/license>.

if [ "$#" -ne 5 ] ; then
     echo "Usage: $(basename $0) <Source directory> <Destination Directory> <Black point> <White point> <Quality> <Output_file>"
     exit 1
fi

SRCDIR="$1"
DSTDIR="$2"
BLACKPOINT="$3"
WHITEPOINT="$4"
QUALITY="$5"
OUTPUT="$6"

[ -z "$QUALITY" ] && QUALITY=98
[ -z "$BLACKPOINT" ] && BLACKPOINT=0
[ -z "$WHITEPOINT" ] && WHITEPOINT=100


getTimestamps() {
    find "$SRCDIR" -maxdepth 1 -name \*.tiff | while read TIFF ; do
        echo $(basename $TIFF) | sed -r -n -e 's/^([0-9]{10}_[0-9]{6})-.*/\1/p'
    done | sort -u
}

NOW=$(date +%s) # _%N

if [ -z "$OUTPUT" ] ; then
  OUTPUT="stitching-$NOW"
  RUN=yes
fi

LOGDIR=log/stitching
mkdir -p $LOGDIR
[ -z "$REMOTESCRIPT" ] && REMOTESCRIPT=remote-scripts/stitch.sh
[ -z "$REMOTELOGGER" ] && REMOTELOGGER=remote-scripts/paralog.sh

echo "#!/usr/bin/parallelbang -I _TIMESTAMP_ --ungroup --sshloginfile .. --joblog $LOGDIR/$(basename $OUTPUT).log --bf $REMOTESCRIPT --bf $REMOTELOGGER $REMOTESCRIPT _TIMESTAMP_ $QUALITY ${BLACKPOINT}%,${WHITEPOINT}%,1 \\\\\\\\| $REMOTELOGGER $(basename $OUTPUT)" | tee "$OUTPUT"

chmod +x "$OUTPUT"

doit() {
  getTimestamps | while read TIMESTAMP ; do
    echo $TIMESTAMP
  done
}

if [ -n "$RUN" ] ; then
  echo "#### running $OUTPUT" 1>&2
  doit | tee -a "$OUTPUT" | parallel --no-notice -I _TIMESTAMP_ --ungroup --sshloginfile .. --joblog $LOGDIR/$(basename $OUTPUT).log --bf $REMOTESCRIPT --bf $REMOTELOGGER $REMOTESCRIPT _TIMESTAMP_ $QUALITY ${BLACKPOINT}%,${WHITEPOINT}%,1 \| $REMOTELOGGER $(basename $OUTPUT)
else
  doit | tee -a "$OUTPUT"
fi

echo "#### saved as $OUTPUT" 1>&2

